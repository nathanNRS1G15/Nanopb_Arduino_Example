/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.1 */

#ifndef PB_PACKET_PB_H_INCLUDED
#define PB_PACKET_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _Capture {
    pb_callback_t channelVoltage;
} Capture;

typedef struct _Wrapper {
    pb_callback_t capture;
    bool has_sequenceNumber;
    uint32_t sequenceNumber;
    bool has_timeStamp;
    uint32_t timeStamp;
} Wrapper;


/* Initializer values for message structs */
#define Capture_init_default                     {{{NULL}, NULL}}
#define Wrapper_init_default                     {{{NULL}, NULL}, false, 0, false, 0}
#define Capture_init_zero                        {{{NULL}, NULL}}
#define Wrapper_init_zero                        {{{NULL}, NULL}, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Capture_channelVoltage_tag               1
#define Wrapper_capture_tag                      1
#define Wrapper_sequenceNumber_tag               2
#define Wrapper_timeStamp_tag                    3

/* Struct field encoding specification for nanopb */
#define Capture_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, INT32,    channelVoltage,    1)
#define Capture_CALLBACK pb_default_field_callback
#define Capture_DEFAULT NULL

#define Wrapper_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  capture,           1) \
X(a, STATIC,   OPTIONAL, UINT32,   sequenceNumber,    2) \
X(a, STATIC,   OPTIONAL, UINT32,   timeStamp,         3)
#define Wrapper_CALLBACK pb_default_field_callback
#define Wrapper_DEFAULT NULL
#define Wrapper_capture_MSGTYPE Capture

extern const pb_msgdesc_t Capture_msg;
extern const pb_msgdesc_t Wrapper_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Capture_fields &Capture_msg
#define Wrapper_fields &Wrapper_msg

/* Maximum encoded size of messages (where known) */
/* Capture_size depends on runtime parameters */
/* Wrapper_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
